{"version":3,"file":"utilities.js","names":[],"sources":["../../../src/types/utilities.ts"],"sourcesContent":["/**\n * extract a type from an array of types.\n * See https://stackoverflow.com/questions/43537520/how-do-i-extract-a-type-from-an-array-in-typescript/52331580\n *\n **/\nexport type Unpacked<T> = T extends (infer U)[] ? U : T;\n\n/**\n * transform an object into Record<string, never> if it is {}\n */\nexport type CleanEmptyObject<T extends object> = keyof T extends never\n  ? Record<string, never>\n  : T;\n"],"mappings":""}