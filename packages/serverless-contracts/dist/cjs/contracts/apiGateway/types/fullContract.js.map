{"version":3,"file":"fullContract.js","names":[],"sources":["../../../../../src/contracts/apiGateway/types/fullContract.ts"],"sourcesContent":["import { JSONSchema } from 'json-schema-to-ts';\n\nimport { DefinedProperties } from './utils';\n\n/**\n * The intermediary type used to determine the contract type of the lambda.\n *\n * Each schema property is possibily undefined (no schema) or is a JSONSchema.\n * Do not use this type directly, use it with `DefinedProperties`\n */\ntype AllFullContractProperties<\n  Path,\n  Method,\n  IntegrationType,\n  PathParametersSchema extends JSONSchema | undefined,\n  QueryStringParametersSchema extends JSONSchema | undefined,\n  HeadersSchema extends JSONSchema | undefined,\n  BodySchema extends JSONSchema | undefined,\n  OutputSchema extends JSONSchema | undefined,\n> = {\n  contractId: { const: string };\n  contractType: { const: IntegrationType };\n  path: { const: Path };\n  method: { const: Method };\n  pathParameters: PathParametersSchema;\n  queryStringParameters: QueryStringParametersSchema;\n  headers: HeadersSchema;\n  body: BodySchema;\n  output: OutputSchema;\n};\n\n/**\n * Computed schema type of the input validation schema.\n *\n * Can be used with `FromSchema` to infer the type of the contract of the lambda\n */\nexport interface FullContractSchemaType<\n  Path,\n  Method,\n  IntegrationType,\n  PathParametersSchema extends JSONSchema | undefined,\n  QueryStringParametersSchema extends JSONSchema | undefined,\n  HeadersSchema extends JSONSchema | undefined,\n  BodySchema extends JSONSchema | undefined,\n  OutputSchema extends JSONSchema | undefined,\n  DefinedFullContractProperties = DefinedProperties<\n    AllFullContractProperties<\n      Path,\n      Method,\n      IntegrationType,\n      PathParametersSchema,\n      QueryStringParametersSchema,\n      HeadersSchema,\n      BodySchema,\n      OutputSchema\n    >\n  >,\n> {\n  type: 'object';\n  properties: DefinedFullContractProperties;\n  required: Array<keyof DefinedFullContractProperties>;\n  additionalProperties: false;\n}\n"],"mappings":""}