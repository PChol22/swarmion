{"version":3,"file":"input.js","names":[],"sources":["../../../../../src/contracts/apiGateway/types/input.ts"],"sourcesContent":["import { JSONSchema } from 'json-schema-to-ts';\n\nimport { DefinedProperties } from './utils';\n\n/**\n * The intermediary type used to determine the input type of the lambda.\n *\n * Each property is either undefined (no schema) or is a JSONSchema.\n * Do not use this type directly, use it with `DefinedProperties`\n */\ntype AllInputProperties<\n  PathParametersSchema extends JSONSchema | undefined,\n  QueryStringParametersSchema extends JSONSchema | undefined,\n  HeadersSchema extends JSONSchema | undefined,\n  BodySchema extends JSONSchema | undefined,\n> = {\n  pathParameters: PathParametersSchema;\n  queryStringParameters: QueryStringParametersSchema;\n  headers: HeadersSchema;\n  body: BodySchema;\n};\n\n/**\n * Computed schema type of the input validation schema.\n *\n * Can be used with `FromSchema` to infer the type of the input event of the lambda\n */\nexport type InputSchemaType<\n  PathParametersSchema extends JSONSchema | undefined,\n  QueryStringParametersSchema extends JSONSchema | undefined,\n  HeadersSchema extends JSONSchema | undefined,\n  BodySchema extends JSONSchema | undefined,\n  AllowAdditionalProperties extends boolean,\n  DefinedInputProperties = DefinedProperties<\n    AllInputProperties<\n      PathParametersSchema,\n      QueryStringParametersSchema,\n      HeadersSchema,\n      BodySchema\n    >\n  >,\n> = {\n  type: 'object';\n  properties: DefinedInputProperties;\n  required: Array<keyof DefinedInputProperties>;\n  additionalProperties: AllowAdditionalProperties;\n};\n"],"mappings":""}