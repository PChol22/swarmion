{"version":3,"file":"lambdaHandler.js","names":[],"sources":["../../../../../src/contracts/apiGateway/types/lambdaHandler.ts"],"sourcesContent":["import type {\n  APIGatewayEventRequestContextJWTAuthorizer,\n  APIGatewayEventRequestContextLambdaAuthorizer,\n  APIGatewayEventRequestContextV2WithAuthorizer,\n  APIGatewayEventRequestContextWithAuthorizer,\n  APIGatewayProxyCallback,\n  APIGatewayProxyCallbackV2,\n  APIGatewayProxyCognitoAuthorizer,\n  APIGatewayProxyEventBase,\n  APIGatewayProxyEventV2WithRequestContext,\n  APIGatewayProxyResult,\n  APIGatewayProxyResultV2,\n  Context,\n} from 'aws-lambda';\nimport { FromSchema } from 'json-schema-to-ts';\n\nimport { ApiGatewayContract } from '../apiGatewayContract';\nimport { OutputType } from './common';\nimport {\n  ApiGatewayAuthorizerType,\n  ApiGatewayIntegrationType,\n} from './constants';\nimport { InputSchemaType } from './input';\nimport { DefinedProperties } from './utils';\n\ntype AuthorizerContext<AuthorizerType extends ApiGatewayAuthorizerType> =\n  AuthorizerType extends 'cognito'\n    ? APIGatewayProxyCognitoAuthorizer\n    : AuthorizerType extends 'jwt'\n    ? APIGatewayEventRequestContextJWTAuthorizer\n    : AuthorizerType extends 'lambda'\n    ? // We use unknown for now because we would need another schema to define the authorizer context\n      APIGatewayEventRequestContextLambdaAuthorizer<unknown>\n    : undefined;\n\nexport type RequestContext<\n  IntegrationType extends ApiGatewayIntegrationType,\n  AuthorizerType extends ApiGatewayAuthorizerType,\n> = IntegrationType extends 'restApi'\n  ? APIGatewayEventRequestContextWithAuthorizer<\n      AuthorizerContext<AuthorizerType>\n    >\n  : APIGatewayEventRequestContextV2WithAuthorizer<\n      AuthorizerContext<AuthorizerType>\n    >;\n\nexport type HandlerEventType<Contract extends ApiGatewayContract> =\n  DefinedProperties<{\n    requestContext: RequestContext<\n      Contract['integrationType'],\n      Contract['authorizerType']\n    >;\n  }> &\n    FromSchema<\n      InputSchemaType<\n        Contract['pathParametersSchema'],\n        Contract['queryStringParametersSchema'],\n        Contract['headersSchema'],\n        Contract['bodySchema'],\n        false\n      >\n    >;\n\ntype HandlerCallback<Contract extends ApiGatewayContract> =\n  Contract['integrationType'] extends 'restApi'\n    ? APIGatewayProxyCallback\n    : APIGatewayProxyCallbackV2;\n\n/**\n * The type of a Swarmion handler, with type-inferred event\n * The handler function can define additional arguments\n */\nexport type HandlerType<\n  Contract extends ApiGatewayContract,\n  AdditionalContext extends\n    | Record<string, unknown>\n    | Record<never, never> = Record<never, never>,\n> = (\n  event: HandlerEventType<Contract>,\n  context: Context & AdditionalContext,\n  ...additionalArgs: never[]\n) => Promise<OutputType<Contract>>;\n\n/**\n * The type of an ApiGateway event. This is the actual event that will\n * be passed to the lambda, not the Swarmion inferred one.\n *\n * See https://docs.aws.amazon.com/lambda/latest/dg/typescript-handler.html.\n */\nexport type ApiGatewayEvent<Contract extends ApiGatewayContract> =\n  Contract['integrationType'] extends 'restApi'\n    ? APIGatewayProxyEventBase<AuthorizerContext<Contract['authorizerType']>>\n    : APIGatewayProxyEventV2WithRequestContext<\n        APIGatewayEventRequestContextV2WithAuthorizer<\n          AuthorizerContext<Contract['authorizerType']>\n        >\n      >;\n\n/**\n * The type of an ApiGateway event. This is the actual event that will\n * be passed to the lambda, not the Swarmion inferred one.\n *\n * See https://docs.aws.amazon.com/lambda/latest/dg/typescript-handler.html.\n */\nexport type ApiGatewayResult<Contract extends ApiGatewayContract> =\n  Contract['integrationType'] extends 'restApi'\n    ? APIGatewayProxyResult\n    : APIGatewayProxyResultV2<OutputType<Contract>>;\n\n/**\n * The type of an ApiGateway handler. This is the actual version that will\n * be executed by the lambda, not the Swarmion inferred one.\n *\n * See https://docs.aws.amazon.com/lambda/latest/dg/typescript-handler.html.\n */\nexport type ApiGatewayHandler<Contract extends ApiGatewayContract> = (\n  event: ApiGatewayEvent<Contract>,\n  context: Context,\n  callback: HandlerCallback<Contract>,\n  ...additionalArgs: never[]\n) => Promise<ApiGatewayResult<Contract>>;\n"],"mappings":""}