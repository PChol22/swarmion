{"version":3,"file":"requestContext.js","names":["getRequestContextMock","args","accountId","apiId","authorizer","undefined","protocol","httpMethod","identity","accessKey","apiKey","apiKeyId","caller","clientCert","cognitoAuthenticationProvider","cognitoAuthenticationType","cognitoIdentityId","cognitoIdentityPoolId","principalOrgId","sourceIp","user","userAgent","userArn","path","stage","requestId","requestTimeEpoch","resourceId","resourcePath","getRequestContextMockV2","domainName","domainPrefix","http","method","routeKey","time","timeEpoch","getHandlerContextMock","callbackWaitsForEmptyEventLoop","functionName","functionVersion","invokedFunctionArn","memoryLimitInMB","awsRequestId","logGroupName","logStreamName"],"sources":["../../../../../src/contracts/apiGateway/__mocks__/requestContext.ts"],"sourcesContent":["import {\n  APIGatewayEventRequestContextV2WithAuthorizer,\n  APIGatewayEventRequestContextWithAuthorizer,\n  Context,\n} from 'aws-lambda';\n\nexport const getRequestContextMock = (\n  args?: Partial<APIGatewayEventRequestContextWithAuthorizer<undefined>>,\n): APIGatewayEventRequestContextWithAuthorizer<undefined> => ({\n  accountId: '',\n  apiId: '',\n  authorizer: undefined,\n  protocol: '',\n  httpMethod: '',\n  identity: {\n    accessKey: null,\n    accountId: null,\n    apiKey: null,\n    apiKeyId: null,\n    caller: null,\n    clientCert: null,\n    cognitoAuthenticationProvider: null,\n    cognitoAuthenticationType: null,\n    cognitoIdentityId: null,\n    cognitoIdentityPoolId: null,\n    principalOrgId: null,\n    sourceIp: 'string',\n    user: null,\n    userAgent: null,\n    userArn: null,\n  },\n  path: '',\n  stage: '',\n  requestId: '',\n  requestTimeEpoch: 0,\n  resourceId: '',\n  resourcePath: '',\n  ...args,\n});\n\nexport const getRequestContextMockV2 = (\n  args?: Partial<APIGatewayEventRequestContextV2WithAuthorizer<undefined>>,\n): APIGatewayEventRequestContextV2WithAuthorizer<undefined> => ({\n  authorizer: undefined,\n  accountId: '',\n  apiId: '',\n  domainName: '',\n  domainPrefix: '',\n  http: {\n    method: '',\n    path: '',\n    protocol: '',\n    sourceIp: '',\n    userAgent: '',\n  },\n  requestId: '',\n  routeKey: '',\n  stage: '',\n  time: '',\n  timeEpoch: 0,\n  ...args,\n});\n\nexport const getHandlerContextMock = (args?: Partial<Context>): Context =>\n  // @ts-expect-error only partial typing here\n  ({\n    callbackWaitsForEmptyEventLoop: false,\n    functionName: '',\n    functionVersion: '',\n    invokedFunctionArn: '',\n    memoryLimitInMB: '',\n    awsRequestId: '',\n    logGroupName: '',\n    logStreamName: '',\n    ...args,\n  });\n"],"mappings":";;;;;;;;;;AAMO,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAqB,CAChCC,IAAsE;EAAA;IAEtEC,SAAS,EAAE,EAAE;IACbC,KAAK,EAAE,EAAE;IACTC,UAAU,EAAEC,SAAS;IACrBC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,EAAE;IACdC,QAAQ,EAAE;MACRC,SAAS,EAAE,IAAI;MACfP,SAAS,EAAE,IAAI;MACfQ,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAE,IAAI;MACZC,UAAU,EAAE,IAAI;MAChBC,6BAA6B,EAAE,IAAI;MACnCC,yBAAyB,EAAE,IAAI;MAC/BC,iBAAiB,EAAE,IAAI;MACvBC,qBAAqB,EAAE,IAAI;MAC3BC,cAAc,EAAE,IAAI;MACpBC,QAAQ,EAAE,QAAQ;MAClBC,IAAI,EAAE,IAAI;MACVC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE;IACX,CAAC;IACDC,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,SAAS,EAAE,EAAE;IACbC,gBAAgB,EAAE,CAAC;IACnBC,UAAU,EAAE,EAAE;IACdC,YAAY,EAAE;EAAE,GACb3B,IAAI;AAAA,CACP;AAAC;AAEI,IAAM4B,uBAAuB,GAAG,SAA1BA,uBAAuB,CAClC5B,IAAwE;EAAA;IAExEG,UAAU,EAAEC,SAAS;IACrBH,SAAS,EAAE,EAAE;IACbC,KAAK,EAAE,EAAE;IACT2B,UAAU,EAAE,EAAE;IACdC,YAAY,EAAE,EAAE;IAChBC,IAAI,EAAE;MACJC,MAAM,EAAE,EAAE;MACVV,IAAI,EAAE,EAAE;MACRjB,QAAQ,EAAE,EAAE;MACZa,QAAQ,EAAE,EAAE;MACZE,SAAS,EAAE;IACb,CAAC;IACDI,SAAS,EAAE,EAAE;IACbS,QAAQ,EAAE,EAAE;IACZV,KAAK,EAAE,EAAE;IACTW,IAAI,EAAE,EAAE;IACRC,SAAS,EAAE;EAAC,GACTnC,IAAI;AAAA,CACP;AAAC;AAEI,IAAMoC,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAIpC,IAAuB;EAAA,OAC3D;IAAA;MAEEqC,8BAA8B,EAAE,KAAK;MACrCC,YAAY,EAAE,EAAE;MAChBC,eAAe,EAAE,EAAE;MACnBC,kBAAkB,EAAE,EAAE;MACtBC,eAAe,EAAE,EAAE;MACnBC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE,EAAE;MAChBC,aAAa,EAAE;IAAE,GACd5C,IAAI;EAAA;AAAA,CACP;AAAC"}