{"version":3,"file":"fullContractSchema.js","names":["getFullContractSchema","contract","properties","contractId","id","contractType","integrationType","path","method","omitBy","pathParameters","pathParametersSchema","queryStringParameters","queryStringParametersSchema","headers","headersSchema","body","bodySchema","output","outputSchema","isUndefined","type","required","Object","keys","additionalProperties"],"sources":["../../../../../src/contracts/apiGateway/features/fullContractSchema.ts"],"sourcesContent":["import isUndefined from 'lodash/isUndefined';\nimport omitBy from 'lodash/omitBy';\n\nimport { ApiGatewayContract } from '../apiGatewayContract';\nimport { FullContractSchemaType } from '../types';\n\n/**\n * Returns the aggregated ApiGatewayContract schema in order to validate the inputs of lambdas.\n *\n * This also enables to infer the type with `json-schema-to-ts`.\n *\n *  @param contract your ApiGatewayContract\n */\nexport const getFullContractSchema = <Contract extends ApiGatewayContract>(\n  contract: Contract,\n): FullContractSchemaType<\n  Contract['path'],\n  Contract['method'],\n  Contract['integrationType'],\n  Contract['pathParametersSchema'],\n  Contract['queryStringParametersSchema'],\n  Contract['headersSchema'],\n  Contract['bodySchema'],\n  Contract['outputSchema']\n> => {\n  const properties = {\n    contractId: { const: contract.id },\n    contractType: { const: contract.integrationType },\n    path: { const: contract.path },\n    method: { const: contract.method },\n    ...omitBy(\n      {\n        pathParameters: contract.pathParametersSchema,\n        queryStringParameters: contract.queryStringParametersSchema,\n        headers: contract.headersSchema,\n        body: contract.bodySchema,\n        output: contract.outputSchema,\n      },\n      isUndefined,\n    ),\n  };\n\n  return {\n    type: 'object',\n    // @ts-ignore type inference does not work here\n    properties,\n    // @ts-ignore type inference does not work here\n    required: Object.keys(properties),\n    additionalProperties: false,\n  };\n};\n"],"mappings":";;;;;;;;AAAA;AACA;AAAmC;AAAA;AAKnC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAqB,CAChCC,QAAkB,EAUf;EACH,IAAMC,UAAU;IACdC,UAAU,EAAE;MAAE,SAAOF,QAAQ,CAACG;IAAG,CAAC;IAClCC,YAAY,EAAE;MAAE,SAAOJ,QAAQ,CAACK;IAAgB,CAAC;IACjDC,IAAI,EAAE;MAAE,SAAON,QAAQ,CAACM;IAAK,CAAC;IAC9BC,MAAM,EAAE;MAAE,SAAOP,QAAQ,CAACO;IAAO;EAAC,GAC/B,IAAAC,kBAAM,EACP;IACEC,cAAc,EAAET,QAAQ,CAACU,oBAAoB;IAC7CC,qBAAqB,EAAEX,QAAQ,CAACY,2BAA2B;IAC3DC,OAAO,EAAEb,QAAQ,CAACc,aAAa;IAC/BC,IAAI,EAAEf,QAAQ,CAACgB,UAAU;IACzBC,MAAM,EAAEjB,QAAQ,CAACkB;EACnB,CAAC,EACDC,uBAAW,CACZ,CACF;EAED,OAAO;IACLC,IAAI,EAAE,QAAQ;IACd;IACAnB,UAAU,EAAVA,UAAU;IACV;IACAoB,QAAQ,EAAEC,MAAM,CAACC,IAAI,CAACtB,UAAU,CAAC;IACjCuB,oBAAoB,EAAE;EACxB,CAAC;AACH,CAAC;AAAC"}