{"version":3,"file":"lambdaHandler.js","names":["getHandler","contract","handler","event","context","_callback","ajv","Ajv","parsedEvent","proxyEventToHandlerEvent","inputValidator","compile","inputSchema","console","error","createHttpError","additionalArgs","handlerResponse","outputSchema","undefined","outputValidator","handlerResponseToProxyResult","isHttpError","expose","headers","statusCode","body","message","getLambdaHandler","additionalContext"],"sources":["../../../../../src/contracts/apiGateway/features/lambdaHandler.ts"],"sourcesContent":["import Ajv from 'ajv';\nimport createHttpError, { isHttpError } from 'http-errors';\n\nimport { ApiGatewayContract } from '../apiGatewayContract';\nimport { ApiGatewayHandler, HandlerType } from '../types';\nimport {\n  handlerResponseToProxyResult,\n  proxyEventToHandlerEvent,\n} from '../utils';\n\nexport const getHandler =\n  <Contract extends ApiGatewayContract>(contract: Contract) =>\n  (handler: HandlerType<Contract>): ApiGatewayHandler<Contract> =>\n  async (event, context, _callback, ...additionalArgs) => {\n    // here we decide to not use the callback argument passed by lambda\n    // because we have asynchronous handlers\n    try {\n      const ajv = new Ajv();\n\n      const parsedEvent = proxyEventToHandlerEvent<Contract>(event);\n\n      const inputValidator = ajv.compile(contract.inputSchema);\n      if (!inputValidator(parsedEvent)) {\n        console.error('Error: Invalid input');\n        throw createHttpError(400, 'Invalid input');\n      }\n\n      const handlerResponse = await handler(\n        parsedEvent,\n        context,\n        ...additionalArgs,\n      );\n\n      if (contract.outputSchema !== undefined) {\n        const outputValidator = ajv.compile(contract.outputSchema);\n        if (!outputValidator(handlerResponse)) {\n          console.error('Error: Invalid output');\n          throw createHttpError(400, 'Invalid output');\n        }\n      }\n\n      return handlerResponseToProxyResult(handlerResponse);\n    } catch (error) {\n      console.error(error);\n\n      if (isHttpError(error) && error.expose) {\n        return {\n          headers: error.headers,\n          statusCode: error.statusCode,\n          body: error.message,\n        };\n      }\n\n      return {\n        statusCode: 500,\n        body: 'Internal server error',\n      };\n    }\n  };\n\n/**\n * A wrapper to get the proper typing for a lambda handler.\n * This does not include parsing and validation.\n *\n * Use `getHandler` for a more advanced usage\n */\nexport const getLambdaHandler =\n  <\n    Contract extends ApiGatewayContract,\n    AdditionalContext extends\n      | Record<string, unknown>\n      | Record<never, never> = Record<never, never>,\n  >(\n    contract: Contract,\n    additionalContext: AdditionalContext,\n  ) =>\n  (\n    handler: HandlerType<typeof contract, typeof additionalContext>,\n  ): HandlerType<typeof contract, typeof additionalContext> =>\n    handler;\n"],"mappings":";;;;;;;;;;AAAA;AACA;AAIA;AAGkB;AAAA;AAEX,IAAMA,UAAU,GACrB,SADWA,UAAU,CACiBC,QAAkB;EAAA,OACxD,UAACC,OAA8B;IAAA;MAAA,yFAC/B,iBAAOC,KAAK,EAAEC,OAAO,EAAEC,SAAS;QAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAItBC,GAAG,GAAG,IAAIC,eAAG,EAAE;gBAEfC,WAAW,GAAG,IAAAC,+BAAwB,EAAWN,KAAK,CAAC;gBAEvDO,cAAc,GAAGJ,GAAG,CAACK,OAAO,CAACV,QAAQ,CAACW,WAAW,CAAC;gBAAA,IACnDF,cAAc,CAACF,WAAW,CAAC;kBAAA;kBAAA;gBAAA;gBAC9BK,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;gBAAC,MAChC,IAAAC,sBAAe,EAAC,GAAG,EAAE,eAAe,CAAC;cAAA;gBAAA,0BAXZC,cAAc;kBAAdA,cAAc;gBAAA;gBAAA;gBAAA,OAcjBd,OAAO,gBACnCM,WAAW,EACXJ,OAAO,SACJY,cAAc,EAClB;cAAA;gBAJKC,eAAe;gBAAA,MAMjBhB,QAAQ,CAACiB,YAAY,KAAKC,SAAS;kBAAA;kBAAA;gBAAA;gBAC/BC,eAAe,GAAGd,GAAG,CAACK,OAAO,CAACV,QAAQ,CAACiB,YAAY,CAAC;gBAAA,IACrDE,eAAe,CAACH,eAAe,CAAC;kBAAA;kBAAA;gBAAA;gBACnCJ,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;gBAAC,MACjC,IAAAC,sBAAe,EAAC,GAAG,EAAE,gBAAgB,CAAC;cAAA;gBAAA,iCAIzC,IAAAM,mCAA4B,EAACJ,eAAe,CAAC;cAAA;gBAAA;gBAAA;gBAEpDJ,OAAO,CAACC,KAAK,aAAO;gBAAC,MAEjB,IAAAQ,uBAAW,cAAO,IAAI,YAAMC,MAAM;kBAAA;kBAAA;gBAAA;gBAAA,iCAC7B;kBACLC,OAAO,EAAE,YAAMA,OAAO;kBACtBC,UAAU,EAAE,YAAMA,UAAU;kBAC5BC,IAAI,EAAE,YAAMC;gBACd,CAAC;cAAA;gBAAA,iCAGI;kBACLF,UAAU,EAAE,GAAG;kBACfC,IAAI,EAAE;gBACR,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAEJ;MAAA;QAAA;MAAA;IAAA;EAAA;AAAA;;AAEH;AACA;AACA;AACA;AACA;AACA;AALA;AAMO,IAAME,gBAAgB,GAC3B,SADWA,gBAAgB,CAOzB3B,QAAkB,EAClB4B,iBAAoC;EAAA,OAEtC,UACE3B,OAA+D;IAAA,OAE/DA,OAAO;EAAA;AAAA;AAAC"}