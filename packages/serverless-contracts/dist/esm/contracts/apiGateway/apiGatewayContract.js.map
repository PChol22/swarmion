{"version":3,"file":"apiGatewayContract.js","names":["isUndefined","omitBy","ApiGatewayContract","props","id","path","method","integrationType","pathParametersSchema","queryStringParametersSchema","headersSchema","bodySchema","outputSchema","inputSchema","getInputSchema","authorizerType","properties","pathParameters","queryStringParameters","headers","body","type","required","Object","keys","additionalProperties"],"sources":["../../../../src/contracts/apiGateway/apiGatewayContract.ts"],"sourcesContent":["import { JSONSchema } from 'json-schema-to-ts';\nimport isUndefined from 'lodash/isUndefined';\nimport omitBy from 'lodash/omitBy';\n\nimport { ConstrainedJSONSchema } from 'types/constrainedJSONSchema';\nimport { HttpMethod } from 'types/http';\n\nimport {\n  ApiGatewayAuthorizerType,\n  ApiGatewayIntegrationType,\n} from './types/constants';\nimport { InputSchemaType } from './types/input';\n\n/**\n * ApiGatewayContract:\n *\n * a contract used to define a type-safe interaction between AWS Services through Api Gateway.\n *\n * Main features:\n * - input and output dynamic validation with JSONSchemas on both end of the contract;\n * - type inference for both input and output;\n * - generation of a contract document that can be checked for breaking changes;\n * - generation of open api documentation\n */\nexport class ApiGatewayContract<\n  Path extends string = string,\n  Method extends HttpMethod = HttpMethod,\n  IntegrationType extends ApiGatewayIntegrationType = ApiGatewayIntegrationType,\n  AuthorizerType extends ApiGatewayAuthorizerType = ApiGatewayAuthorizerType,\n  PathParametersSchema extends ConstrainedJSONSchema | undefined =\n    | ConstrainedJSONSchema\n    | undefined,\n  QueryStringParametersSchema extends ConstrainedJSONSchema | undefined =\n    | ConstrainedJSONSchema\n    | undefined,\n  HeadersSchema extends ConstrainedJSONSchema | undefined =\n    | ConstrainedJSONSchema\n    | undefined,\n  BodySchema extends JSONSchema | undefined = JSONSchema | undefined,\n  OutputSchema extends JSONSchema | undefined = JSONSchema | undefined,\n> {\n  public contractType = 'apiGateway' as const;\n  public id: string;\n  public path: Path;\n  public method: Method;\n  public integrationType: IntegrationType;\n  public authorizerType: AuthorizerType;\n  public pathParametersSchema: PathParametersSchema;\n  public queryStringParametersSchema: QueryStringParametersSchema;\n  public headersSchema: HeadersSchema;\n  public bodySchema: BodySchema;\n  public outputSchema: OutputSchema;\n  public inputSchema: InputSchemaType<\n    PathParametersSchema,\n    QueryStringParametersSchema,\n    HeadersSchema,\n    BodySchema,\n    true\n  >;\n\n  /**\n   * Builds a new ApiGateway contract\n   *\n   * @param id an id to uniquely identify the contract among services. Beware of uniqueness!\n   * @param path the path on which the lambda will be triggered\n   * @param method the http method\n   * @param integrationType httpApi or restApi, see https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html\n   * @param pathParametersSchema a JSONSchema used to validate the path parameters and infer their types.\n   * Please note that the `as const` directive is necessary to properly infer the type from the schema.\n   * See https://github.com/ThomasAribart/json-schema-to-ts#fromschema.\n   * Also please note that for Typescript reasons, you need to explicitly pass `undefined` if you don't want to use the schema.\n   * @param queryStringParametersSchema a JSONSchema used to validate the query parameters and infer their types (Same constraints).\n   * @param headersSchema a JSONSchema used to validate the headers and infer their types (Same constraints).\n   * @param bodySchema a JSONSchema used to validate the body and infer its type (Same constraints).\n   * @param outputSchema a JSONSchema used to validate the output and infer its type (Same constraints).\n   * @param authorizerType indicates which type of authorizer is used for this contract.\n   */\n  constructor(props: {\n    id: string;\n    path: Path;\n    method: Method;\n    integrationType: IntegrationType;\n    pathParametersSchema: PathParametersSchema;\n    queryStringParametersSchema: QueryStringParametersSchema;\n    headersSchema: HeadersSchema;\n    bodySchema: BodySchema;\n    outputSchema: OutputSchema;\n    authorizerType: AuthorizerType;\n  }) {\n    this.id = props.id;\n    this.path = props.path;\n    this.method = props.method;\n    this.integrationType = props.integrationType;\n    this.pathParametersSchema = props.pathParametersSchema;\n    this.queryStringParametersSchema = props.queryStringParametersSchema;\n    this.headersSchema = props.headersSchema;\n    this.bodySchema = props.bodySchema;\n    this.outputSchema = props.outputSchema;\n    this.inputSchema = this.getInputSchema();\n    this.authorizerType = props.authorizerType;\n  }\n\n  private getInputSchema(): InputSchemaType<\n    PathParametersSchema,\n    QueryStringParametersSchema,\n    HeadersSchema,\n    BodySchema,\n    true\n  > {\n    const properties = omitBy(\n      {\n        pathParameters: this.pathParametersSchema,\n        queryStringParameters: this.queryStringParametersSchema,\n        headers: this.headersSchema,\n        body: this.bodySchema,\n      } as const,\n      isUndefined,\n    );\n\n    return {\n      type: 'object',\n      properties,\n      // @ts-ignore here object.keys is not precise enough\n      required: Object.keys(properties),\n      additionalProperties: true,\n    };\n  }\n}\n"],"mappings":";;;AACA,OAAOA,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,MAAM,MAAM,eAAe;AAWlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,kBAAkB;EAoC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,4BAAYC,KAWX,EAAE;IAAA;IAAA,sCA/CmB,YAAY;IAgDhC,IAAI,CAACC,EAAE,GAAGD,KAAK,CAACC,EAAE;IAClB,IAAI,CAACC,IAAI,GAAGF,KAAK,CAACE,IAAI;IACtB,IAAI,CAACC,MAAM,GAAGH,KAAK,CAACG,MAAM;IAC1B,IAAI,CAACC,eAAe,GAAGJ,KAAK,CAACI,eAAe;IAC5C,IAAI,CAACC,oBAAoB,GAAGL,KAAK,CAACK,oBAAoB;IACtD,IAAI,CAACC,2BAA2B,GAAGN,KAAK,CAACM,2BAA2B;IACpE,IAAI,CAACC,aAAa,GAAGP,KAAK,CAACO,aAAa;IACxC,IAAI,CAACC,UAAU,GAAGR,KAAK,CAACQ,UAAU;IAClC,IAAI,CAACC,YAAY,GAAGT,KAAK,CAACS,YAAY;IACtC,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,cAAc,EAAE;IACxC,IAAI,CAACC,cAAc,GAAGZ,KAAK,CAACY,cAAc;EAC5C;EAAC;IAAA;IAAA,OAED,0BAME;MACA,IAAMC,UAAU,GAAGf,MAAM,CACvB;QACEgB,cAAc,EAAE,IAAI,CAACT,oBAAoB;QACzCU,qBAAqB,EAAE,IAAI,CAACT,2BAA2B;QACvDU,OAAO,EAAE,IAAI,CAACT,aAAa;QAC3BU,IAAI,EAAE,IAAI,CAACT;MACb,CAAC,EACDX,WAAW,CACZ;MAED,OAAO;QACLqB,IAAI,EAAE,QAAQ;QACdL,UAAU,EAAVA,UAAU;QACV;QACAM,QAAQ,EAAEC,MAAM,CAACC,IAAI,CAACR,UAAU,CAAC;QACjCS,oBAAoB,EAAE;MACxB,CAAC;IACH;EAAC;EAAA;AAAA"}