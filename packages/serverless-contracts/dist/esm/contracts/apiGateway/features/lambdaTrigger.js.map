{"version":3,"file":"lambdaTrigger.js","names":["getTrigger","contract","additionalConfig","key","integrationType","path","method"],"sources":["../../../../../src/contracts/apiGateway/features/lambdaTrigger.ts"],"sourcesContent":["import { ApiGatewayContract } from '../apiGatewayContract';\nimport {\n  ApiGatewayLambdaCompleteTriggerType,\n  ApiGatewayTriggerArgs,\n  ApiGatewayTriggerKey,\n} from '../types';\n\n/**\n * Returns a basic serverless function trigger associated to an ApiGatewayContract\n *\n * @argument contract your ApiGatewayContract\n * @argument additionalConfig for example an authorizer reference. Only required when the contract requires authentication\n */\nexport const getTrigger = <Contract extends ApiGatewayContract>(\n  ...[contract, additionalConfig]: ApiGatewayTriggerArgs<Contract>\n): ApiGatewayLambdaCompleteTriggerType<\n  ApiGatewayTriggerKey<Contract['integrationType']>,\n  Contract['authorizerType']\n> => {\n  const key = contract.integrationType === 'httpApi' ? 'httpApi' : 'http';\n\n  // @ts-ignore somehow the type inference does not work here\n  return {\n    [key]: {\n      ...additionalConfig,\n      path: contract.path,\n      method: contract.method,\n    },\n  };\n};\n"],"mappings":";;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAU,GAKlB;EAAA;IAAA;EAAA;EAAA,IAJCC,QAAQ;IAAEC,gBAAgB;EAK9B,IAAMC,GAAG,GAAGF,QAAQ,CAACG,eAAe,KAAK,SAAS,GAAG,SAAS,GAAG,MAAM;;EAEvE;EACA,2BACGD,GAAG,kCACCD,gBAAgB;IACnBG,IAAI,EAAEJ,QAAQ,CAACI,IAAI;IACnBC,MAAM,EAAEL,QAAQ,CAACK;EAAM;AAG7B,CAAC"}