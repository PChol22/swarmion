import { ApiGatewayContract } from '../apiGatewayContract';
import { ApiGatewayHandler, HandlerType } from '../types';
export declare const getHandler: <Contract extends ApiGatewayContract<string, import("../../../types/http").HttpMethod, import("../types/constants").ApiGatewayIntegrationType, import("../types/constants").ApiGatewayAuthorizerType, import("../../../types/constrainedJSONSchema").ConstrainedJSONSchema | undefined, import("../../../types/constrainedJSONSchema").ConstrainedJSONSchema | undefined, import("../../../types/constrainedJSONSchema").ConstrainedJSONSchema | undefined, import("json-schema-to-ts").JSONSchema7 | undefined, import("json-schema-to-ts").JSONSchema7 | undefined>>(contract: Contract) => (handler: HandlerType<Contract, Record<never, never>>) => ApiGatewayHandler<Contract>;
export declare const getLambdaHandler: <Contract extends ApiGatewayContract<string, import("../../../types/http").HttpMethod, import("../types/constants").ApiGatewayIntegrationType, import("../types/constants").ApiGatewayAuthorizerType, import("../../../types/constrainedJSONSchema").ConstrainedJSONSchema | undefined, import("../../../types/constrainedJSONSchema").ConstrainedJSONSchema | undefined, import("../../../types/constrainedJSONSchema").ConstrainedJSONSchema | undefined, import("json-schema-to-ts").JSONSchema7 | undefined, import("json-schema-to-ts").JSONSchema7 | undefined>, AdditionalContext extends Record<string, unknown> | Record<never, never> = Record<never, never>>(contract: Contract, additionalContext: AdditionalContext) => (handler: HandlerType<Contract, AdditionalContext>) => HandlerType<Contract, AdditionalContext>;
//# sourceMappingURL=lambdaHandler.d.ts.map