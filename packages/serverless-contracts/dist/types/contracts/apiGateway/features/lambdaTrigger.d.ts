import { ApiGatewayContract } from '../apiGatewayContract';
import { ApiGatewayLambdaCompleteTriggerType, ApiGatewayTriggerArgs, ApiGatewayTriggerKey } from '../types';
export declare const getTrigger: <Contract extends ApiGatewayContract<string, import("../../../types/http").HttpMethod, import("../types/constants").ApiGatewayIntegrationType, import("../types/constants").ApiGatewayAuthorizerType, import("../../../types/constrainedJSONSchema").ConstrainedJSONSchema | undefined, import("../../../types/constrainedJSONSchema").ConstrainedJSONSchema | undefined, import("../../../types/constrainedJSONSchema").ConstrainedJSONSchema | undefined, import("json-schema-to-ts").JSONSchema7 | undefined, import("json-schema-to-ts").JSONSchema7 | undefined>>(...[contract, additionalConfig]: ApiGatewayTriggerArgs<Contract>) => ApiGatewayLambdaCompleteTriggerType<ApiGatewayTriggerKey<Contract["integrationType"]>, Contract["authorizerType"]>;
//# sourceMappingURL=lambdaTrigger.d.ts.map