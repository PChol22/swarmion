{"version":3,"file":"normalizeOptions.js","names":["normalizeOptions","tree","options","generatorType","name","names","fileName","packageRoot","joinPathFragments","directory","linter","Linter","EsLint","projectName","replace","RegExp","getCaseAwareFileName","pascalCaseFiles","getWorkspaceLayout","npmScope","offsetFromRoot","relative","root","importPath","formatImportPath","workspaceName","normalized","className","GeneratorType","LIBRARY","SERVICE","GeneratorTypeToDirectory"],"sources":["../../../../src/generators/helpers/normalizeOptions.ts"],"sourcesContent":["import {\n  getWorkspaceLayout,\n  joinPathFragments,\n  names,\n  Tree,\n} from '@nrwl/devkit';\nimport { Linter } from '@nrwl/linter';\nimport { relative } from 'path';\n\nimport {\n  GeneratorType,\n  GeneratorTypeToDirectory,\n  NormalizedSchema,\n  Schema,\n} from '../types';\n\nexport const normalizeOptions = (\n  tree: Tree,\n  options: Schema,\n  generatorType: GeneratorType,\n): NormalizedSchema => {\n  const name = names(options.name).fileName;\n  const packageRoot = joinPathFragments(\n    names(options.directory).fileName,\n    name,\n  );\n\n  const linter = Linter.EsLint;\n\n  const projectName = name.replace(new RegExp('/', 'g'), '-');\n  const fileName = getCaseAwareFileName({\n    fileName: projectName,\n    pascalCaseFiles: false,\n  });\n  const { npmScope } = getWorkspaceLayout(tree);\n  const offsetFromRoot = relative(packageRoot, tree.root);\n  const importPath = formatImportPath(generatorType, projectName);\n\n  return {\n    ...options,\n    fileName,\n    generatorType,\n    importPath,\n    linter,\n    name: projectName,\n    packageRoot,\n    offsetFromRoot,\n    workspaceName: npmScope,\n  };\n};\n\nconst getCaseAwareFileName = (options: {\n  pascalCaseFiles: boolean;\n  fileName: string;\n}) => {\n  const normalized = names(options.fileName);\n\n  return options.pascalCaseFiles ? normalized.className : normalized.fileName;\n};\n\nconst formatImportPath = (\n  generatorType: GeneratorType,\n  projectName: string,\n) => {\n  switch (generatorType) {\n    case GeneratorType.LIBRARY:\n      return projectName;\n    case GeneratorType.SERVICE:\n      return `${GeneratorTypeToDirectory[generatorType]}-${projectName}`;\n  }\n};\n"],"mappings":";;;;;;;;AAAA;AAMA;AACA;AAEA;AAKkB;AAAA;AAEX,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgB,CAC3BC,IAAU,EACVC,OAAe,EACfC,aAA4B,EACP;EACrB,IAAMC,IAAI,GAAG,IAAAC,aAAK,EAACH,OAAO,CAACE,IAAI,CAAC,CAACE,QAAQ;EACzC,IAAMC,WAAW,GAAG,IAAAC,yBAAiB,EACnC,IAAAH,aAAK,EAACH,OAAO,CAACO,SAAS,CAAC,CAACH,QAAQ,EACjCF,IAAI,CACL;EAED,IAAMM,MAAM,GAAGC,cAAM,CAACC,MAAM;EAE5B,IAAMC,WAAW,GAAGT,IAAI,CAACU,OAAO,CAAC,IAAIC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC;EAC3D,IAAMT,QAAQ,GAAGU,oBAAoB,CAAC;IACpCV,QAAQ,EAAEO,WAAW;IACrBI,eAAe,EAAE;EACnB,CAAC,CAAC;EACF,0BAAqB,IAAAC,0BAAkB,EAACjB,IAAI,CAAC;IAArCkB,QAAQ,uBAARA,QAAQ;EAChB,IAAMC,cAAc,GAAG,IAAAC,cAAQ,EAACd,WAAW,EAAEN,IAAI,CAACqB,IAAI,CAAC;EACvD,IAAMC,UAAU,GAAGC,gBAAgB,CAACrB,aAAa,EAAEU,WAAW,CAAC;EAE/D,uCACKX,OAAO;IACVI,QAAQ,EAARA,QAAQ;IACRH,aAAa,EAAbA,aAAa;IACboB,UAAU,EAAVA,UAAU;IACVb,MAAM,EAANA,MAAM;IACNN,IAAI,EAAES,WAAW;IACjBN,WAAW,EAAXA,WAAW;IACXa,cAAc,EAAdA,cAAc;IACdK,aAAa,EAAEN;EAAQ;AAE3B,CAAC;AAAC;AAEF,IAAMH,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAId,OAG7B,EAAK;EACJ,IAAMwB,UAAU,GAAG,IAAArB,aAAK,EAACH,OAAO,CAACI,QAAQ,CAAC;EAE1C,OAAOJ,OAAO,CAACe,eAAe,GAAGS,UAAU,CAACC,SAAS,GAAGD,UAAU,CAACpB,QAAQ;AAC7E,CAAC;AAED,IAAMkB,gBAAgB,GAAG,SAAnBA,gBAAgB,CACpBrB,aAA4B,EAC5BU,WAAmB,EAChB;EACH,QAAQV,aAAa;IACnB,KAAKyB,oBAAa,CAACC,OAAO;MACxB,OAAOhB,WAAW;IACpB,KAAKe,oBAAa,CAACE,OAAO;MACxB,iBAAUC,+BAAwB,CAAC5B,aAAa,CAAC,cAAIU,WAAW;EAAG;AAEzE,CAAC"}