{"version":3,"file":"normalizeOptions.js","names":["getWorkspaceLayout","joinPathFragments","names","Linter","relative","GeneratorType","GeneratorTypeToDirectory","normalizeOptions","tree","options","generatorType","name","fileName","packageRoot","directory","linter","EsLint","projectName","replace","RegExp","getCaseAwareFileName","pascalCaseFiles","npmScope","offsetFromRoot","root","importPath","formatImportPath","workspaceName","normalized","className","LIBRARY","SERVICE"],"sources":["../../../../src/generators/helpers/normalizeOptions.ts"],"sourcesContent":["import {\n  getWorkspaceLayout,\n  joinPathFragments,\n  names,\n  Tree,\n} from '@nrwl/devkit';\nimport { Linter } from '@nrwl/linter';\nimport { relative } from 'path';\n\nimport {\n  GeneratorType,\n  GeneratorTypeToDirectory,\n  NormalizedSchema,\n  Schema,\n} from '../types';\n\nexport const normalizeOptions = (\n  tree: Tree,\n  options: Schema,\n  generatorType: GeneratorType,\n): NormalizedSchema => {\n  const name = names(options.name).fileName;\n  const packageRoot = joinPathFragments(\n    names(options.directory).fileName,\n    name,\n  );\n\n  const linter = Linter.EsLint;\n\n  const projectName = name.replace(new RegExp('/', 'g'), '-');\n  const fileName = getCaseAwareFileName({\n    fileName: projectName,\n    pascalCaseFiles: false,\n  });\n  const { npmScope } = getWorkspaceLayout(tree);\n  const offsetFromRoot = relative(packageRoot, tree.root);\n  const importPath = formatImportPath(generatorType, projectName);\n\n  return {\n    ...options,\n    fileName,\n    generatorType,\n    importPath,\n    linter,\n    name: projectName,\n    packageRoot,\n    offsetFromRoot,\n    workspaceName: npmScope,\n  };\n};\n\nconst getCaseAwareFileName = (options: {\n  pascalCaseFiles: boolean;\n  fileName: string;\n}) => {\n  const normalized = names(options.fileName);\n\n  return options.pascalCaseFiles ? normalized.className : normalized.fileName;\n};\n\nconst formatImportPath = (\n  generatorType: GeneratorType,\n  projectName: string,\n) => {\n  switch (generatorType) {\n    case GeneratorType.LIBRARY:\n      return projectName;\n    case GeneratorType.SERVICE:\n      return `${GeneratorTypeToDirectory[generatorType]}-${projectName}`;\n  }\n};\n"],"mappings":";;;AAAA,SACEA,kBAAkB,EAClBC,iBAAiB,EACjBC,KAAK,QAEA,cAAc;AACrB,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,QAAQ,QAAQ,MAAM;AAE/B,SACEC,aAAa,EACbC,wBAAwB;AAK1B,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAC3BC,IAAU,EACVC,OAAe,EACfC,aAA4B,EACP;EACrB,IAAMC,IAAI,GAAGT,KAAK,CAACO,OAAO,CAACE,IAAI,CAAC,CAACC,QAAQ;EACzC,IAAMC,WAAW,GAAGZ,iBAAiB,CACnCC,KAAK,CAACO,OAAO,CAACK,SAAS,CAAC,CAACF,QAAQ,EACjCD,IAAI,CACL;EAED,IAAMI,MAAM,GAAGZ,MAAM,CAACa,MAAM;EAE5B,IAAMC,WAAW,GAAGN,IAAI,CAACO,OAAO,CAAC,IAAIC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC;EAC3D,IAAMP,QAAQ,GAAGQ,oBAAoB,CAAC;IACpCR,QAAQ,EAAEK,WAAW;IACrBI,eAAe,EAAE;EACnB,CAAC,CAAC;EACF,0BAAqBrB,kBAAkB,CAACQ,IAAI,CAAC;IAArCc,QAAQ,uBAARA,QAAQ;EAChB,IAAMC,cAAc,GAAGnB,QAAQ,CAACS,WAAW,EAAEL,IAAI,CAACgB,IAAI,CAAC;EACvD,IAAMC,UAAU,GAAGC,gBAAgB,CAAChB,aAAa,EAAEO,WAAW,CAAC;EAE/D,uCACKR,OAAO;IACVG,QAAQ,EAARA,QAAQ;IACRF,aAAa,EAAbA,aAAa;IACbe,UAAU,EAAVA,UAAU;IACVV,MAAM,EAANA,MAAM;IACNJ,IAAI,EAAEM,WAAW;IACjBJ,WAAW,EAAXA,WAAW;IACXU,cAAc,EAAdA,cAAc;IACdI,aAAa,EAAEL;EAAQ;AAE3B,CAAC;AAED,IAAMF,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAIX,OAG7B,EAAK;EACJ,IAAMmB,UAAU,GAAG1B,KAAK,CAACO,OAAO,CAACG,QAAQ,CAAC;EAE1C,OAAOH,OAAO,CAACY,eAAe,GAAGO,UAAU,CAACC,SAAS,GAAGD,UAAU,CAAChB,QAAQ;AAC7E,CAAC;AAED,IAAMc,gBAAgB,GAAG,SAAnBA,gBAAgB,CACpBhB,aAA4B,EAC5BO,WAAmB,EAChB;EACH,QAAQP,aAAa;IACnB,KAAKL,aAAa,CAACyB,OAAO;MACxB,OAAOb,WAAW;IACpB,KAAKZ,aAAa,CAAC0B,OAAO;MACxB,iBAAUzB,wBAAwB,CAACI,aAAa,CAAC,cAAIO,WAAW;EAAG;AAEzE,CAAC"}