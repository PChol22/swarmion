{"version":3,"file":"listRemoteContractSchemas.js","names":["listRemoteContractSchemas","serverless","provider","getProvider","getLatestDeployedTimestamp","latestDeployedTimestamp","undefined","previousArtifactDirectoryName","buildPreviousDeploymentArtifactDirectoryName","service","getServiceName","stage","getServerlessDeploymentBucketName","bucketName","params","Bucket","Key","COMPILED_CONTRACTS_FILE_NAME","request","remoteContractsBuffer","Body","provides","consumes","gitCommit","contractsVersion","CONTRACTS_VERSION","contractSchemas","JSON","parse","toString"],"sources":["../../../../src/plugin/utils/listRemoteContractSchemas.ts"],"sourcesContent":["import * as S3 from 'aws-sdk/clients/s3';\nimport Serverless from 'serverless';\n\nimport { RemoteServerlessContractSchemas } from 'types/serviceOptions';\n\nimport { buildPreviousDeploymentArtifactDirectoryName } from './artifactDirectory';\nimport { COMPILED_CONTRACTS_FILE_NAME, CONTRACTS_VERSION } from './constants';\nimport { getLatestDeployedTimestamp } from './getLatestDeployedTimestamp';\n\nexport const listRemoteContractSchemas = async (\n  serverless: Serverless,\n): Promise<RemoteServerlessContractSchemas | undefined> => {\n  const provider = serverless.getProvider('aws');\n  const latestDeployedTimestamp = await getLatestDeployedTimestamp(provider);\n\n  if (latestDeployedTimestamp === undefined) return;\n\n  const previousArtifactDirectoryName =\n    buildPreviousDeploymentArtifactDirectoryName(\n      'serverless',\n      serverless.service.getServiceName(),\n      serverless.service.provider.stage,\n      latestDeployedTimestamp,\n    );\n\n  const bucketName = await provider.getServerlessDeploymentBucketName();\n\n  const params = {\n    Bucket: bucketName,\n    Key: `${previousArtifactDirectoryName}/${COMPILED_CONTRACTS_FILE_NAME}`,\n  };\n\n  const { Body: remoteContractsBuffer } = (await provider.request(\n    'S3',\n    'getObject',\n    params,\n  )) as S3.GetObjectOutput;\n\n  if (remoteContractsBuffer === undefined) {\n    return {\n      provides: {},\n      consumes: {},\n      gitCommit: '',\n      contractsVersion: CONTRACTS_VERSION,\n    };\n  }\n\n  const contractSchemas = JSON.parse(\n    remoteContractsBuffer.toString(),\n  ) as RemoteServerlessContractSchemas;\n\n  return contractSchemas;\n};\n"],"mappings":";;;;;;;;;AAKA;AACA;AACA;AAEO,IAAMA,yBAAyB;EAAA,yFAAG,iBACvCC,UAAsB;IAAA;IAAA;MAAA;QAAA;UAAA;YAEhBC,QAAQ,GAAGD,UAAU,CAACE,WAAW,CAAC,KAAK,CAAC;YAAA;YAAA,OACR,IAAAC,sDAA0B,EAACF,QAAQ,CAAC;UAAA;YAApEG,uBAAuB;YAAA,MAEzBA,uBAAuB,KAAKC,SAAS;cAAA;cAAA;YAAA;YAAA;UAAA;YAEnCC,6BAA6B,GACjC,IAAAC,+DAA4C,EAC1C,YAAY,EACZP,UAAU,CAACQ,OAAO,CAACC,cAAc,EAAE,EACnCT,UAAU,CAACQ,OAAO,CAACP,QAAQ,CAACS,KAAK,EACjCN,uBAAuB,CACxB;YAAA;YAAA,OAEsBH,QAAQ,CAACU,iCAAiC,EAAE;UAAA;YAA/DC,UAAU;YAEVC,MAAM,GAAG;cACbC,MAAM,EAAEF,UAAU;cAClBG,GAAG,YAAKT,6BAA6B,cAAIU,uCAA4B;YACvE,CAAC;YAAA;YAAA,OAE8Cf,QAAQ,CAACgB,OAAO,CAC7D,IAAI,EACJ,WAAW,EACXJ,MAAM,CACP;UAAA;YAAA;YAJaK,qBAAqB,SAA3BC,IAAI;YAAA,MAMRD,qBAAqB,KAAKb,SAAS;cAAA;cAAA;YAAA;YAAA,iCAC9B;cACLe,QAAQ,EAAE,CAAC,CAAC;cACZC,QAAQ,EAAE,CAAC,CAAC;cACZC,SAAS,EAAE,EAAE;cACbC,gBAAgB,EAAEC;YACpB,CAAC;UAAA;YAGGC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAChCT,qBAAqB,CAACU,QAAQ,EAAE,CACjC;YAAA,iCAEMH,eAAe;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvB;EAAA,gBA3CY1B,yBAAyB;IAAA;EAAA;AAAA,GA2CrC;AAAC"}