{"version":3,"file":"uploadContractSchemas.js","names":["uploadContractSchemas","serverless","log","service","provider","shouldNotDeploy","info","getProvider","getServerlessDeploymentBucketName","bucketName","artifactDirectoryName","contractSchemas","listLocalContractSchemas","git","simpleGit","revparse","gitCommit","contractSchemasToUpload","contractsVersion","CONTRACTS_VERSION","fileHash","crypto","createHash","update","JSON","stringify","digest","params","Bucket","Key","COMPILED_CONTRACTS_FILE_NAME","Body","ContentType","Metadata","filesha256","request"],"sources":["../../../../src/plugin/utils/uploadContractSchemas.ts"],"sourcesContent":["import crypto from 'crypto';\nimport * as Serverless from 'serverless';\nimport Plugin from 'serverless/classes/Plugin';\nimport { simpleGit } from 'simple-git';\n\nimport { RemoteServerlessContractSchemas } from 'types/serviceOptions';\n\nimport { COMPILED_CONTRACTS_FILE_NAME, CONTRACTS_VERSION } from './constants';\nimport { listLocalContractSchemas } from './listLocalContractSchemas';\n\nexport const uploadContractSchemas = async (\n  serverless: Serverless,\n  log: Plugin.Logging['log'],\n): Promise<void> => {\n  // @ts-ignore @types/serverless does not know this prop\n  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n  if (serverless.service.provider.shouldNotDeploy) {\n    log.info('Service files not changed. Skipping contract schemas upload...');\n  }\n  const provider = serverless.getProvider('aws');\n  const bucketName = await provider.getServerlessDeploymentBucketName();\n  const artifactDirectoryName = serverless.service.package\n    .artifactDirectoryName as string;\n\n  const contractSchemas = listLocalContractSchemas(serverless);\n\n  const git = simpleGit();\n\n  const gitCommit = await git.revparse('HEAD');\n\n  const contractSchemasToUpload: RemoteServerlessContractSchemas = {\n    ...contractSchemas,\n    gitCommit,\n    contractsVersion: CONTRACTS_VERSION,\n  };\n\n  const fileHash = crypto\n    .createHash('sha256')\n    .update(JSON.stringify(contractSchemasToUpload))\n    .digest('base64');\n\n  const params = {\n    Bucket: bucketName,\n    Key: `${artifactDirectoryName}/${COMPILED_CONTRACTS_FILE_NAME}`,\n    Body: JSON.stringify(contractSchemasToUpload),\n    ContentType: 'application/json',\n    Metadata: {\n      filesha256: fileHash,\n    },\n  };\n\n  log.info('Uploading contract schemas file to S3...');\n\n  await provider.request('S3', 'upload', params);\n};\n"],"mappings":";;;;;;;;;;AAAA;AAGA;AAIA;AACA;AAAsE;AAAA;AAE/D,IAAMA,qBAAqB;EAAA,yFAAG,iBACnCC,UAAsB,EACtBC,GAA0B;IAAA;IAAA;MAAA;QAAA;UAAA;YAE1B;YACA;YACA,IAAID,UAAU,CAACE,OAAO,CAACC,QAAQ,CAACC,eAAe,EAAE;cAC/CH,GAAG,CAACI,IAAI,CAAC,gEAAgE,CAAC;YAC5E;YACMF,QAAQ,GAAGH,UAAU,CAACM,WAAW,CAAC,KAAK,CAAC;YAAA;YAAA,OACrBH,QAAQ,CAACI,iCAAiC,EAAE;UAAA;YAA/DC,UAAU;YACVC,qBAAqB,GAAGT,UAAU,CAACE,OAAO,WAAQ,CACrDO,qBAAqB;YAElBC,eAAe,GAAG,IAAAC,kDAAwB,EAACX,UAAU,CAAC;YAEtDY,GAAG,GAAG,IAAAC,oBAAS,GAAE;YAAA;YAAA,OAECD,GAAG,CAACE,QAAQ,CAAC,MAAM,CAAC;UAAA;YAAtCC,SAAS;YAETC,uBAAwD,mCACzDN,eAAe;cAClBK,SAAS,EAATA,SAAS;cACTE,gBAAgB,EAAEC;YAAiB;YAG/BC,QAAQ,GAAGC,kBAAM,CACpBC,UAAU,CAAC,QAAQ,CAAC,CACpBC,MAAM,CAACC,IAAI,CAACC,SAAS,CAACR,uBAAuB,CAAC,CAAC,CAC/CS,MAAM,CAAC,QAAQ,CAAC;YAEbC,MAAM,GAAG;cACbC,MAAM,EAAEnB,UAAU;cAClBoB,GAAG,YAAKnB,qBAAqB,cAAIoB,uCAA4B,CAAE;cAC/DC,IAAI,EAAEP,IAAI,CAACC,SAAS,CAACR,uBAAuB,CAAC;cAC7Ce,WAAW,EAAE,kBAAkB;cAC/BC,QAAQ,EAAE;gBACRC,UAAU,EAAEd;cACd;YACF,CAAC;YAEDlB,GAAG,CAACI,IAAI,CAAC,0CAA0C,CAAC;YAAC;YAAA,OAE/CF,QAAQ,CAAC+B,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAER,MAAM,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC/C;EAAA,gBA5CY3B,qBAAqB;IAAA;EAAA;AAAA,GA4CjC;AAAC"}