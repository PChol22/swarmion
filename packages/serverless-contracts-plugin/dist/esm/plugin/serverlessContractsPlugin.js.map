{"version":3,"file":"serverlessContractsPlugin.js","names":["DeploymentStrategies","ContractSchemasLocation","serviceOptionsSchema","getTimestampFromArtifactDirectoryName","LATEST_DEPLOYED_TIMESTAMP_TAG_NAME","generateOpenApiDocumentation","listLocalContractSchemas","listRemoteContractSchemas","printContractSchemas","uploadContractSchemas","validateDeployment","ServerlessContractsPlugin","serverless","cliOptions","log","strategy","undefined","Object","values","includes","Error","JSON","stringify","configSchemaHandler","defineTopLevelProperty","commands","localContracts","usage","lifecycleEvents","remoteContracts","safeDeploy","options","shortcut","required","type","hooks","printLocalServerlessContractSchemas","bind","printRemoteServerlessContractSchemas","deployWithContractSchemasValidation","tagStackWithTimestamp","pluginManager","spawn","contractSchemas","LOCAL","error","REMOTE","artifactDirectoryName","service","timestamp","provider","stackTags","localContractSchemas","remoteContractSchemas","warning","info"],"sources":["../../../src/plugin/serverlessContractsPlugin.ts"],"sourcesContent":["import * as Serverless from 'serverless';\nimport * as Plugin from 'serverless/classes/Plugin';\n\nimport { DeploymentStrategies } from '../types/deploymentTypes';\nimport { ContractSchemasLocation } from '../types/locations';\nimport {\n  RemoteServerlessContractSchemas,\n  ServerlessContractSchemas,\n  serviceOptionsSchema,\n} from '../types/serviceOptions';\nimport { getTimestampFromArtifactDirectoryName } from './utils/artifactDirectory';\nimport { LATEST_DEPLOYED_TIMESTAMP_TAG_NAME } from './utils/constants';\nimport { generateOpenApiDocumentation } from './utils/generateOpenApiDocumentation';\nimport { listLocalContractSchemas } from './utils/listLocalContractSchemas';\nimport { listRemoteContractSchemas } from './utils/listRemoteContractSchemas';\nimport { printContractSchemas } from './utils/printContractSchemas';\nimport { uploadContractSchemas } from './utils/uploadContractSchemas';\nimport { validateDeployment } from './utils/validateDeployment';\n\ninterface OptionsExtended extends Serverless.Options {\n  verbose?: boolean;\n  strategy?: DeploymentStrategies;\n}\n\nexport class ServerlessContractsPlugin implements Plugin {\n  cliOptions: OptionsExtended;\n  serverless: Serverless;\n  hooks: Plugin.Hooks;\n  commands: Plugin.Commands;\n  log: Plugin.Logging['log'];\n\n  constructor(\n    serverless: Serverless,\n    cliOptions: OptionsExtended,\n    { log }: Plugin.Logging,\n  ) {\n    this.cliOptions = cliOptions;\n    this.log = log;\n    // validate the 'strategy' argument\n    if (\n      this.cliOptions.strategy !== undefined &&\n      !Object.values(DeploymentStrategies).includes(this.cliOptions.strategy)\n    ) {\n      throw new Error(\n        `Invalid deployment strategy. Choices are ${JSON.stringify(\n          Object.values(DeploymentStrategies),\n        )}`,\n      );\n    }\n    this.serverless = serverless;\n\n    // add validation schema for options\n    serverless.configSchemaHandler.defineTopLevelProperty(\n      'contracts',\n      serviceOptionsSchema,\n    );\n\n    this.commands = {\n      localContracts: {\n        usage: 'Show local Serverless contracts',\n        lifecycleEvents: ['run'],\n      },\n      remoteContracts: {\n        usage: 'Show currently deployed Serverless contracts',\n        lifecycleEvents: ['run'],\n      },\n      safeDeploy: {\n        usage: 'Deploy you service and specify the deployment strategy',\n        lifecycleEvents: ['run'],\n        options: {\n          // Define the '--strategy' option with the '-s' shortcut\n          strategy: {\n            usage: 'Specify the deployment strategy',\n            shortcut: 's',\n            required: true,\n            // @ts-ignore mistype in @types/serverless\n            type: 'string',\n          },\n        },\n      },\n      generateOpenApiDocumentation: {\n        usage:\n          'Generate OpenAPI with local Serverless contracts provided by the service',\n        lifecycleEvents: ['run'],\n      },\n    };\n    this.hooks = {\n      'localContracts:run': this.printLocalServerlessContractSchemas.bind(this),\n      'remoteContracts:run':\n        this.printRemoteServerlessContractSchemas.bind(this),\n      'safeDeploy:run': this.deployWithContractSchemasValidation.bind(this),\n      'before:deploy:deploy': this.validateDeployment.bind(this),\n      'before:package:finalize': this.tagStackWithTimestamp.bind(this),\n      'after:aws:deploy:deploy:uploadArtifacts':\n        this.uploadContractSchemas.bind(this),\n      'generateOpenApiDocumentation:run':\n        this.generateOpenApiDocumentation.bind(this),\n    };\n  }\n\n  /**\n   * This command is merely a wrapper around the `deploy` command from the serverless Framework,\n   * leveraging the use of the `--strategy` option.\n   * Therefore, while this option has been set in the constructor, all we need to to is\n   * launch the serverless framework deployment\n   */\n  async deployWithContractSchemasValidation(): Promise<void> {\n    await this.serverless.pluginManager.spawn('deploy');\n  }\n\n  listLocalContractSchemas(): ServerlessContractSchemas {\n    return listLocalContractSchemas(this.serverless);\n  }\n\n  printLocalServerlessContractSchemas(): void {\n    const contractSchemas = this.listLocalContractSchemas();\n    printContractSchemas(contractSchemas, ContractSchemasLocation.LOCAL);\n  }\n\n  async printRemoteServerlessContractSchemas(): Promise<void> {\n    const contractSchemas = await this.listRemoteContractSchemas();\n    if (contractSchemas === undefined) {\n      this.log.error('Unable to retrieve remote contract schemas');\n\n      return;\n    }\n    printContractSchemas(contractSchemas, ContractSchemasLocation.REMOTE);\n  }\n\n  async listRemoteContractSchemas(): Promise<\n    RemoteServerlessContractSchemas | undefined\n  > {\n    return listRemoteContractSchemas(this.serverless);\n  }\n\n  tagStackWithTimestamp(): void {\n    const artifactDirectoryName = this.serverless.service.package\n      .artifactDirectoryName as string;\n\n    const timestamp = getTimestampFromArtifactDirectoryName(\n      artifactDirectoryName,\n    );\n\n    this.serverless.service.provider.stackTags = {\n      ...this.serverless.service.provider.stackTags,\n      [LATEST_DEPLOYED_TIMESTAMP_TAG_NAME]: timestamp,\n    };\n  }\n\n  async uploadContractSchemas(): Promise<void> {\n    await uploadContractSchemas(this.serverless, this.log);\n  }\n\n  async validateDeployment(): Promise<void> {\n    const localContractSchemas = listLocalContractSchemas(this.serverless);\n    const remoteContractSchemas = await listRemoteContractSchemas(\n      this.serverless,\n    );\n    if (remoteContractSchemas === undefined) {\n      this.log.warning(\n        'Contracts: Unable to retrieve remote contract schemas, deployment is unsafe',\n      );\n\n      return;\n    }\n\n    if (this.cliOptions.strategy !== undefined) {\n      this.log.info('Validating contract schemas...');\n\n      await validateDeployment(\n        localContractSchemas,\n        remoteContractSchemas,\n        this.cliOptions.strategy,\n      );\n    }\n  }\n\n  generateOpenApiDocumentation(): void {\n    generateOpenApiDocumentation(this.serverless);\n  }\n}\n"],"mappings":"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"}